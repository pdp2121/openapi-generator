# coding: utf-8

"""
    XRP Ledger Public API

    A JSON RPC API used to query rippled.

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictFloat, StrictInt, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional, Union
from openapi_client.models.channel import Channel
from openapi_client.models.lookup_by_ledger_request_ledger_index import LookupByLedgerRequestLedgerIndex
from openapi_client.models.response_warning import ResponseWarning
from typing import Optional, Set
from typing_extensions import Self

class AccountChannelsSuccessResponse(BaseModel):
    """
    AccountChannelsSuccessResponse
    """ # noqa: E501
    account: StrictStr = Field(description="The address of the source/owner of the payment channels. This corresponds to the account field of the request.")
    channels: Optional[List[Channel]] = Field(default=None, description="Payment channels owned by this account.")
    validated: Optional[StrictBool] = Field(default=None, description="If true, the information in this response comes from a validated ledger version. Otherwise, the information is subject to change.")
    limit: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="The limit to how many channel objects were actually returned by this request.")
    marker: Optional[Any] = Field(default=None, description="Server-defined value for pagination. Pass this to the next call to resume getting results where this call left off. Omitted when there are no additional pages after this one.")
    forwarded: Optional[StrictBool] = Field(default=None, description="Indicates whether the request was forwarded.")
    status: StrictStr = Field(description="The status of the response (e.g., 'success').")
    warning: Optional[StrictStr] = Field(default=None, description="A specific warning type (e.g., 'load').")
    warnings: Optional[List[ResponseWarning]] = Field(default=None, description="An array of response warnings.")
    ledger_hash: Optional[StrictStr] = Field(default=None, description="A 20-byte hex string for the ledger version to use.")
    ledger_index: Optional[LookupByLedgerRequestLedgerIndex] = None
    __properties: ClassVar[List[str]] = ["forwarded", "status", "warning", "warnings", "ledger_hash", "ledger_index"]

    @field_validator('status')
    def status_validate_enum(cls, value):
        """Validates the enum"""
        if value not in set(['success']):
            raise ValueError("must be one of enum values ('success')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of AccountChannelsSuccessResponse from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in warnings (list)
        _items = []
        if self.warnings:
            for _item in self.warnings:
                if _item:
                    _items.append(_item.to_dict())
            _dict['warnings'] = _items
        # override the default output from pydantic by calling `to_dict()` of ledger_index
        if self.ledger_index:
            _dict['ledger_index'] = self.ledger_index.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of AccountChannelsSuccessResponse from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "forwarded": obj.get("forwarded"),
            "status": obj.get("status"),
            "warning": obj.get("warning"),
            "warnings": [ResponseWarning.from_dict(_item) for _item in obj["warnings"]] if obj.get("warnings") is not None else None,
            "ledger_hash": obj.get("ledger_hash"),
            "ledger_index": LookupByLedgerRequestLedgerIndex.from_dict(obj["ledger_index"]) if obj.get("ledger_index") is not None else None
        })
        return _obj


