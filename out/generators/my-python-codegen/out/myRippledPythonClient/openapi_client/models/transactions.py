# coding: utf-8

"""
    XRP Ledger Public API

    A JSON RPC API used to query rippled.

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class Transactions(BaseModel):
    """
    Transactions
    """ # noqa: E501
    auth_change: Optional[StrictBool] = Field(default=None, description="Whether this transaction changes this address's ways of authorizing transactions.")
    fee: Optional[StrictStr] = Field(default=None, description="The Transaction Cost of this transaction, in drops of XRP.")
    fee_level: Optional[StrictStr] = Field(default=None, description="The transaction cost of this transaction, relative to the minimum cost for this type of transaction, in fee levels.")
    max_spend_drops: Optional[StrictStr] = Field(default=None, description="The maximum amount of XRP, in drops, this transaction could send or destroy.")
    seq: Optional[StrictInt] = Field(default=None, description="The Sequence Number of this transaction.")
    __properties: ClassVar[List[str]] = ["auth_change", "fee", "fee_level", "max_spend_drops", "seq"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of Transactions from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        def camel_to_snake(name):
            return re.sub(r'(?<!^)(?=[A-Z])', '_', name).lower()

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # Convert keys to snake case
        _dict_snake_case = {camel_to_snake(key): value for key, value in _dict.items()}
        
        
        return _dict_snake_case

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of Transactions from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "auth_change": obj.get("auth_change"),
            "fee": obj.get("fee"),
            "fee_level": obj.get("fee_level"),
            "max_spend_drops": obj.get("max_spend_drops"),
            "seq": obj.get("seq")
        })
        return _obj


