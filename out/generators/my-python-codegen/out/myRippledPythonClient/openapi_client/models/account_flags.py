# coding: utf-8

"""
    XRP Ledger Public API

    A JSON RPC API used to query rippled.

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class AccountFlags(BaseModel):
    """
    AccountFlags
    """ # noqa: E501
    default_ripple: Optional[StrictBool] = Field(default=None, description="If true, the account allows rippling on its trust lines by default.", alias="defaultRipple")
    deposit_auth: Optional[StrictBool] = Field(default=None, description="If true, the account is using Deposit Authorization and does not accept any payments from unknown parties.", alias="depositAuth")
    disable_master_key: Optional[StrictBool] = Field(default=None, description="If true, the account's master key pair is disabled.", alias="disableMasterKey")
    disallow_incoming_check: Optional[StrictBool] = Field(default=None, description="If true, the account does not allow others to send Checks to it.", alias="disallowIncomingCheck")
    disallow_incoming_nf_token_offer: Optional[StrictBool] = Field(default=None, description="If true, the account does not allow others to make NFT buy or sell offers to it.", alias="disallowIncomingNFTokenOffer")
    disallow_incoming_pay_chan: Optional[StrictBool] = Field(default=None, description="If true, the account does not allow others to make Payment Channels to it.", alias="disallowIncomingPayChan")
    disallow_incoming_trustline: Optional[StrictBool] = Field(default=None, description="If true, the account does not allow others to make trust lines to it.", alias="disallowIncomingTrustline")
    disallow_incoming_xrp: Optional[StrictBool] = Field(default=None, description="If true, the account does not want to receive XRP from others. This is advisory and not enforced at a protocol level.", alias="disallowIncomingXRP")
    global_freeze: Optional[StrictBool] = Field(default=None, description="If true, all tokens issued by the account are currently frozen.", alias="globalFreeze")
    no_freeze: Optional[StrictBool] = Field(default=None, description="If true, the account has permanently given up the abilities to freeze individual trust lines or end a global freeze.", alias="noFreeze")
    password_spent: Optional[StrictBool] = Field(default=None, description="If false, the account can send a special key reset transaction with a transaction cost of 0.", alias="passwordSpent")
    require_authorization: Optional[StrictBool] = Field(default=None, description="If true, the account is using Authorized Trust Lines to limit who can hold the tokens it issues.", alias="requireAuthorization")
    require_destination_tag: Optional[StrictBool] = Field(default=None, description="If true, the account requires a destination tag on all payments it receives.", alias="requireDestinationTag")
    __properties: ClassVar[List[str]] = ["defaultRipple", "depositAuth", "disableMasterKey", "disallowIncomingCheck", "disallowIncomingNFTokenOffer", "disallowIncomingPayChan", "disallowIncomingTrustline", "disallowIncomingXRP", "globalFreeze", "noFreeze", "passwordSpent", "requireAuthorization", "requireDestinationTag"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of AccountFlags from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        def camel_to_snake(name):
            return re.sub(r'(?<!^)(?=[A-Z])', '_', name).lower()

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # Convert keys to snake case
        _dict_snake_case = {camel_to_snake(key): value for key, value in _dict.items()}
        
        
        return _dict_snake_case

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of AccountFlags from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "defaultRipple": obj.get("defaultRipple"),
            "depositAuth": obj.get("depositAuth"),
            "disableMasterKey": obj.get("disableMasterKey"),
            "disallowIncomingCheck": obj.get("disallowIncomingCheck"),
            "disallowIncomingNFTokenOffer": obj.get("disallowIncomingNFTokenOffer"),
            "disallowIncomingPayChan": obj.get("disallowIncomingPayChan"),
            "disallowIncomingTrustline": obj.get("disallowIncomingTrustline"),
            "disallowIncomingXRP": obj.get("disallowIncomingXRP"),
            "globalFreeze": obj.get("globalFreeze"),
            "noFreeze": obj.get("noFreeze"),
            "passwordSpent": obj.get("passwordSpent"),
            "requireAuthorization": obj.get("requireAuthorization"),
            "requireDestinationTag": obj.get("requireDestinationTag")
        })
        return _obj


