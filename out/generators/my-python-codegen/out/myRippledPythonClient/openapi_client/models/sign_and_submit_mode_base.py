# coding: utf-8

"""
    XRP Ledger Public API

    A JSON RPC API used to query rippled.

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class SignAndSubmitModeBase(BaseModel):
    """
    A mode for signing a transaction and immediately submitting it. This mode is intended for testing.
    """ # noqa: E501
    secret: Optional[StrictStr] = Field(default=None, description="(Optional) Secret key of the account supplying the transaction, used to sign it. Do not send your secret to untrusted servers or through unsecured network connections. Cannot be used with key_type, seed, seed_hex, or passphrase.")
    seed: Optional[StrictStr] = Field(default=None, description="(Optional) Secret key of the account supplying the transaction, used to sign it. Must be in the XRP Ledger's base58 format. If provided, you must also specify the key_type. Cannot be used with secret, seed_hex, or passphrase.")
    seed_hex: Optional[StrictStr] = Field(default=None, description="(Optional) Secret key of the account supplying the transaction, used to sign it. Must be in hexadecimal format. If provided, you must also specify the key_type. Cannot be used with secret, seed, or passphrase.")
    passphrase: Optional[StrictStr] = Field(default=None, description="(Optional) Secret key of the account supplying the transaction, used to sign it, as a string passphrase. If provided, you must also specify the key_type. Cannot be used with secret, seed, or seed_hex.")
    key_type: Optional[StrictStr] = Field(default=None, description="(Optional) Type of cryptographic key provided in this request. Valid types are secp256k1 or ed25519. Defaults to secp256k1. Cannot be used with secret. Caution: Ed25519 support is experimental.")
    fail_hard: Optional[StrictBool] = Field(default=None, description="(Optional) If true, and the transaction fails locally, do not retry or relay the transaction to other servers. Default is false. Updated in: rippled 1.5.0")
    offline: Optional[StrictBool] = Field(default=None, description="(Optional) If true, when constructing the transaction, do not try to automatically fill in or validate values. Default is false.")
    build_path: Optional[StrictBool] = Field(default=None, description="(Optional) If this field is provided, the server auto-fills the Paths field of a Payment transaction before signing. Omit this field if the transaction is a direct XRP payment or if it is not a Payment-type transaction. Caution: The server looks for the presence or absence of this field, not its value. This behavior may change. (Issue #3272)")
    fee_mult_max: Optional[StrictInt] = Field(default=None, description="(Optional) Sign-and-submit fails with the error rpcHIGH_FEE if the auto-filled Fee value would be greater than the reference transaction cost x fee_mult_max รท fee_div_max. This field has no effect if you explicitly specify the Fee field of the transaction. Default is 10.")
    fee_div_max: Optional[StrictInt] = Field(default=None, description="(Optional) Sign-and-submit fails with the error rpcHIGH_FEE if the auto-filled Fee value would be greater than the reference transaction cost x fee_mult_max รท fee_div_max. This field has no effect if you explicitly specify the Fee field of the transaction. Default is 1.")
    __properties: ClassVar[List[str]] = ["secret", "seed", "seed_hex", "passphrase", "key_type", "fail_hard", "offline", "build_path", "fee_mult_max", "fee_div_max"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of SignAndSubmitModeBase from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        def camel_to_snake(name):
            return re.sub(r'(?<!^)(?=[A-Z])', '_', name).lower()

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # Convert keys to snake case
        _dict_snake_case = {camel_to_snake(key): value for key, value in _dict.items()}
        
        
        return _dict_snake_case

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of SignAndSubmitModeBase from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "secret": obj.get("secret"),
            "seed": obj.get("seed"),
            "seed_hex": obj.get("seed_hex"),
            "passphrase": obj.get("passphrase"),
            "key_type": obj.get("key_type"),
            "fail_hard": obj.get("fail_hard"),
            "offline": obj.get("offline"),
            "build_path": obj.get("build_path"),
            "fee_mult_max": obj.get("fee_mult_max"),
            "fee_div_max": obj.get("fee_div_max")
        })
        return _obj


