# coding: utf-8

"""
    XRP Ledger Public API

    A JSON RPC API used to query rippled.

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List
from openapi_client.models.signer_entry import SignerEntry
from typing import Optional, Set
from typing_extensions import Self

class SignerList(BaseModel):
    """
    SignerList
    """ # noqa: E501
    ledger_entry_type: StrictStr = Field(description="The value 0x0053, mapped to the string SignerList, indicates that this is a SignerList ledger entry.", alias="LedgerEntryType")
    owner_node: StrictStr = Field(description="A hint indicating which page of the owner directory links to this object, in case the directory consists of multiple pages.", alias="OwnerNode")
    previous_txn_id: StrictStr = Field(description="The identifying hash of the transaction that most recently modified this object.", alias="PreviousTxnID")
    previous_txn_lgr_seq: StrictInt = Field(description="The index of the ledger that contains the transaction that most recently modified this object.", alias="PreviousTxnLgrSeq")
    signer_entries: List[SignerEntry] = Field(description="An array of Signer Entry objects representing the parties who are part of this signer list.", alias="SignerEntries")
    signer_list_id: StrictInt = Field(description="An ID for this signer list. Currently always set to 0. If a future amendment allows multiple signer lists for an account, this may change.", alias="SignerListID")
    signer_quorum: StrictInt = Field(description="A target number for signer weights. To produce a valid signature for the owner of this SignerList, the signers must provide valid signatures whose weights sum to this value or more.", alias="SignerQuorum")
    __properties: ClassVar[List[str]] = ["LedgerEntryType", "OwnerNode", "PreviousTxnID", "PreviousTxnLgrSeq", "SignerEntries", "SignerListID", "SignerQuorum"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of SignerList from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        def camel_to_snake(name):
            return re.sub(r'(?<!^)(?=[A-Z])', '_', name).lower()

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # Convert keys to snake case
        _dict_snake_case = {camel_to_snake(key): value for key, value in _dict.items()}
        
        # override the default output from pydantic by calling `to_dict()` of each item in signer_entries (list)
        _items = []
        if self.signer_entries:
            for _item in self.signer_entries:
                if _item:
                    _items.append(_item.to_dict())
            _dict_snake_case['signer_entries'] = _items
        
        return _dict_snake_case

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of SignerList from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "LedgerEntryType": obj.get("LedgerEntryType"),
            "OwnerNode": obj.get("OwnerNode"),
            "PreviousTxnID": obj.get("PreviousTxnID"),
            "PreviousTxnLgrSeq": obj.get("PreviousTxnLgrSeq"),
            "SignerEntries": [SignerEntry.from_dict(_item) for _item in obj["SignerEntries"]] if obj.get("SignerEntries") is not None else None,
            "SignerListID": obj.get("SignerListID"),
            "SignerQuorum": obj.get("SignerQuorum")
        })
        return _obj


