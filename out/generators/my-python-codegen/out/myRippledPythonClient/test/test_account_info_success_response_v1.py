# coding: utf-8

"""
    XRP Ledger Public API

    A JSON RPC API used to query rippled.

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from openapi_client.models.account_info_success_response_v1 import AccountInfoSuccessResponseV1

class TestAccountInfoSuccessResponseV1(unittest.TestCase):
    """AccountInfoSuccessResponseV1 unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> AccountInfoSuccessResponseV1:
        """Test AccountInfoSuccessResponseV1
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `AccountInfoSuccessResponseV1`
        """
        model = AccountInfoSuccessResponseV1()
        if include_optional:
            return AccountInfoSuccessResponseV1(
                forwarded = True,
                status = 'success',
                warning = '',
                warnings = [
                    openapi_client.models.response_warning.ResponseWarning(
                        details = {
                            'key' : ''
                            }, 
                        id = 56, 
                        message = '', )
                    ],
                account_flags = openapi_client.models.account_flags.AccountFlags(
                    default_ripple = True, 
                    deposit_auth = True, 
                    disable_master_key = True, 
                    disallow_incoming_check = True, 
                    disallow_incoming_nf_token_offer = True, 
                    disallow_incoming_pay_chan = True, 
                    disallow_incoming_trustline = True, 
                    disallow_incoming_xrp = True, 
                    global_freeze = True, 
                    no_freeze = True, 
                    password_spent = True, 
                    require_authorization = True, 
                    require_destination_tag = True, ),
                ledger_current_index = 56,
                ledger_index = 56,
                queue_data = openapi_client.models.queue_data.QueueData(
                    txn_count = 56, 
                    auth_change_queued = True, 
                    lowest_sequence = 56, 
                    highest_sequence = 56, 
                    max_spend_drops_total = '', 
                    transactions = [
                        openapi_client.models.transactions.Transactions(
                            auth_change = True, 
                            fee = '', 
                            fee_level = '', 
                            max_spend_drops = '', 
                            seq = 56, )
                        ], ),
                validated = True,
                account_data = None
            )
        else:
            return AccountInfoSuccessResponseV1(
                status = 'success',
        )
        """

    def testAccountInfoSuccessResponseV1(self):
        """Test AccountInfoSuccessResponseV1"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()
