# coding: utf-8

"""
    XRP Ledger Public API

    A JSON RPC API used to query rippled.

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from openapi_client.models.account_channels_success_response import AccountChannelsSuccessResponse

class TestAccountChannelsSuccessResponse(unittest.TestCase):
    """AccountChannelsSuccessResponse unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> AccountChannelsSuccessResponse:
        """Test AccountChannelsSuccessResponse
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `AccountChannelsSuccessResponse`
        """
        model = AccountChannelsSuccessResponse()
        if include_optional:
            return AccountChannelsSuccessResponse(
                account = '',
                channels = [
                    openapi_client.models.channel.Channel(
                        account = '', 
                        amount = '', 
                        balance = '', 
                        cancel_after = 56, 
                        channel_id = '', 
                        destination_account = '', 
                        destination_tag = 56, 
                        expiration = 56, 
                        public_key = '', 
                        public_key_hex = '', 
                        settle_delay = 56, 
                        source_tag = 56, )
                    ],
                validated = True,
                limit = 1.337,
                marker = None,
                forwarded = True,
                status = 'success',
                warning = '',
                warnings = [
                    openapi_client.models.response_warning.ResponseWarning(
                        details = {
                            'key' : ''
                            }, 
                        id = 56, 
                        message = '', )
                    ],
                ledger_hash = '',
                ledger_index = None
            )
        else:
            return AccountChannelsSuccessResponse(
                account = '',
                status = 'success',
        )
        """

    def testAccountChannelsSuccessResponse(self):
        """Test AccountChannelsSuccessResponse"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()
